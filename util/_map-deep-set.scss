@use 'sass:map';
@use 'sass:list';

//===============================================================
// Map Deep Set
//===============================================================

// Example:

// $grid-configuration: (
//   'columns': 12,
//   'layouts': (
//     'small': 800px,
//     'medium': 1000px,
//     'large': 1200px,
//   ),
// );
//
// // Without `map-deep-set`
// $grid-configuration: map.merge($grid-configuration, map.merge(map.get($grid-configuration, 'layouts'), ('large': 1300px)));
//
// // With `map-deep-set`
// $medium: map-deep-set($grid-configuration, 'layouts', 'medium', 1300px);

/// Update a key deeply nested
/// @author Hugo Giraudel
/// @param {Map} $map - Map to update
/// @param {Arglist} $keys - Keys to access to value to update
/// @param {*} $value - New value (last member of `$keys`)
/// @return {Map} - Updated map
@function map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;

  @if list.length($keys) == 2 {
    @return map.merge($map, (list.nth($keys, 1): list.nth($keys, -1)));
  }

  @for $i from 1 through list.length($keys) - 2 {
    $map-list: list.append($map-list, map.get(list.nth($map-list, -1), list.nth($keys, $i)));
  }

  @for $i from list.length($map-list) through 1 {
    $result: map.merge(list.nth($map-list, $i), (list.nth($keys, $i): if($i == list.length($map-list), list.nth($keys, -1), $result)));
  }

  @return $result;
}
