@use 'sass:map';
@use '../node_modules/sass-true' as *;
@use '../util/map-deep-get' as *;
@use '../util/map-deep-set' as *;
@use '../util/map-extend' as *;
@use '../util/map-has-keys' as *;
@use '../util/map-has-nested-keys' as *;
@use '../util/map-zip' as *;
@use '../util/strip-unit' as *;
@use '../util/compare-unit' as *;

$breakpoints: (
  small: 500px,
  medium: 768px,
  large: 1024px,
  xlarge: 1280px,
  max: 1440px
);

$colors: (
  black: #000,
  white: #fff,
  red: #ff0000,
  peaches-and-cream: #f8c6b8
);

$sizes: (
  xs: (
    default: 20px
  ),

  s: (
    default: 10px,
    medium: 30px,
    max: 50px
  ),

  m: (
    default: 20px,
    medium: 40px,
    max: 80px
  )
);

$font-stacks: (
  helvetica: (
    font-family: ('Helvetica Neue', arial, sans-serif),
    font-weight: normal,
    font-style: normal
  )
);

$type-styles: (
  a: (
    stack: helvetica,
    sizes: (
      default: (
        font-size: 1.6rem,
        line-height: 1.55
      ),
      medium: 2.4rem,
      large: 3.2rem
    ),
  ),
  b: (
    stack: helvetica,
    sizes: (
      default: (
        font-size: 1.6rem,
        line-height: 1.55,
        text-transform: uppercase,
        letter-spacing: 0.1em
      ),
      medium: 2.4rem,
      large: 3.2rem
    )
  ),
  c: (
    stack: helvetica,
    sizes: (
      default: (
        font-size: 16px,
        line-height: 1.55
      ),
      medium: (
        font-size: 24px,
        line-height: 1.7
      ),
      large: 32px
    ),
  ),
  d: (
    stack: helvetica,
    sizes: (
      default: 1.6rem
    )
  ),
  e: (
    stack: helvetica,
    sizes: (
      default: (
        font-size: 16px,
        line-height: 24px,
        text-transform: uppercase,
      ),
      medium: 24px,
      large: (
        font-size: 32px,
        line-height: 40px,
        text-transform: none,
      ),
    ),
    fluid: true
  )
);

@use '../index' as toolkit with (
  $-colors: $colors,
  $-breakpoints: $breakpoints,
  $-font-stacks: $font-stacks,
  $-type-styles: $type-styles,
  $-sizes: $sizes,
) ;

// ---------------------------------------------------------------
// Utils
// ---------------------------------------------------------------

@include test-module('Strip Unit') {
  @include test('Strips unitless') {
    @include assert-equal(
      strip-unit(20), 20
    );
  }
  @include test('Strips px') {
    @include assert-equal(
      strip-unit(20px), 20
    );
  }
  @include test('Strips rem') {
    @include assert-equal(
      strip-unit(20rem), 20
    );
  }
  @include test('Strips em') {
    @include assert-equal(
      strip-unit(20em), 20
    );
  }
}

@include test-module('Get properties for type size set') {
  $type-style: map.get($type-styles, 'a');
  $sizes: map.get($type-style, 'sizes');
  $size: map.get($sizes, 'default');

  @include test('Without filtering') {
    @include assert-equal(
      toolkit.get-properties-for-type-size-set($size), (
        font-size: 1.6rem,
        line-height: 1.55
      )
    );
  }

  @include test('With filtering') {
    @include assert-equal(
        toolkit.get-properties-for-type-size-set($size, (line-height)), (
        line-height: 1.55
      )
    );
  }
}

@include test-module('Get properties for type sizes') {
  $sizes: map-deep-get($type-styles, 'a', 'sizes');

  @include test('Without filtering') {
    @include assert-equal(
      toolkit.get-properties-for-type-sizes($sizes), (
        default: (
          font-size: 1.6rem,
          line-height: 1.55
        ),
        medium: (
          font-size: 2.4rem
        ),
        large: (
          font-size: 3.2rem
        )
      )
    );
  }

  @include test('With filtering') {
    @include assert-equal(
        toolkit.get-properties-for-type-sizes($sizes, ('line-height')), (
        default: (
          line-height: 1.55
        ),
        medium: (),
        large: ()
      )
    );
  }
}

@include test-module('Filter Fluid Properties') {
  $sizes: (
    default: (
      font-size: 16px,
      font-weight: 300,
      line-height: 24px,
      text-transform: uppercase,
      letter-spacing: 0.1em,
    ),
    medium: 24px,
    large: (
      font-size: 32px,
      font-weight: 500,
      line-height: 40px,
      text-transform: none,
      letter-spacing: 0.2em
    ),
  );

  @include test('Get fluid properties') {
    @include assert-equal(
      toolkit.filter-fluid-properties($sizes, $breakpoints, true),
      (
        sizes: (
          default: (
            font-size: 16px,
            line-height: 24px,
          ),
          medium: (
            font-size: 24px
          ),
          large: (
            font-size: 32px,
            line-height: 40px
          ),
        ),
        properties-list: (font-size line-height)
      ),
      $inspect: true
    );
  }

  @include test('Get non-fluid properties') {
    @include assert-equal(
      toolkit.filter-fluid-properties($sizes, $breakpoints, false),
        (
          sizes: (
            default: (
              font-weight: 300,
              text-transform: uppercase,
              letter-spacing: 0.1em
            ),
            large: (
              font-weight: 500,
              text-transform: none,
              letter-spacing: 0.2em
            ),
          ),
          properties-list: (font-weight text-transform letter-spacing)
        ),
        $inspect: true
    );
  }
}

@include test-module('Compare Unit') {
  @include test('Compare equal unitless') {
    @include assert-equal(
        compare-unit(10 20 30 100), true
    );
  }
  @include test('Compare unequal unitless') {
    @include assert-equal(
        compare-unit(10 20 30px 100), false
    );
  }
  @include test('Compare equal px') {
    @include assert-equal(
        compare-unit(10px 20px 30px 100px), true
    );
  }
  @include test('Compare unequal px') {
    @include assert-equal(
        compare-unit(10px 20px 30 100px), false
    );
  }
  @include test('Compare equal rem') {
    @include assert-equal(
        compare-unit(10rem 20rem 30rem 100rem), true
    );
  }
  @include test('Compare unequal rem') {
    @include assert-equal(
        compare-unit(10rem 20rem 30 100rem), false
    );
  }
}

@include test-module('Maps') {
  $grid-configuration: (
    'columns': 12,
    'layouts': (
      'small': 800px,
      'medium': 1000px,
      'large': 1200px,
    ),
  );

  @include test('Deep Set') {
    @include assert-equal(
      map-deep-set($grid-configuration, 'layouts', 'medium', 1300px),
      (columns: 12, layouts: (small: 800px, medium: 1300px, large: 1200px))
    );
  }

  @include test('Deep Get') {
    @include assert-equal(
      map-deep-get($grid-configuration, 'layouts', 'medium'),
      1000px
    );
  }

  @include test('Has Keys - True') {
    @include assert-equal(
      map-has-keys($grid-configuration, 'columns', 'layouts'),
      true
    );
  }

  @include test('Has Keys - False') {
    @include assert-equal(
      map-has-keys($grid-configuration, 'columns', 'gutter'),
      false
    );
  }

  @include test('Has Nested Keys- True') {
    @include assert-equal(
      map-has-nested-keys($grid-configuration, 'layouts', 'small'),
      true
    );
  }

  @include test('Has Nested Keys- False') {
    @include assert-equal(
        map-has-nested-keys($grid-configuration, 'layouts', 'max'),
        false
    );
  }

  @include test('Extend') {
     $grid-configuration-custom: (
       'layouts': (
         'large': 1300px,
         'huge': 1500px
       ),
     );

     $grid-configuration-user: (
       'direction': 'ltr',
       'columns': 16,
       'layouts': (
         'large': 1300px,
         'huge': 1500px
       ),
     );

    @include assert-equal(
        map-extend($grid-configuration, $grid-configuration-custom, $grid-configuration-user),
        (
         'direction': 'ltr',
         'columns': 16,
         'layouts': (
           'large': 1300px,
           'huge': 1500px
         ),
       )
    );
  }

  @include test('Zip') {
     $layout-names: 'small', 'medium', 'large', 'huge';
     $layout-values: 600px, 900px, 1200px, 1500px;

    @include assert-equal(
        map-zip($layout-names, $layout-values),
        (small: 600px, medium: 900px, large: 1200px, huge: 1500px)
    );
  }
}


// ---------------------------------------------------------------
// Color
// ---------------------------------------------------------------

@include test-module('Color') {
  @include test('Outputs the correct color') {
    @include assert-equal(
      toolkit.color(black), #000
    );
    @include assert-equal(
      toolkit.color(white), #fff
    );
    @include assert-equal(
      toolkit.color(red), #ff0000
    );
    @include assert-equal(
      toolkit.color(peaches-and-cream), #f8c6b8
    );
  }

  @include test('Outputs helper classes') {
    @include assert {
      @include output {
        @include toolkit.output-color-helpers;
      }
      @include expect {
        .h-color-text-black {
          color: #000;
        }

        .h-color-bg-black {
          background-color: #000;
        }

        .h-color-text-white {
          color: #fff;
        }

        .h-color-bg-white {
          background-color: #fff;
        }

        .h-color-text-red {
          color: #ff0000;
        }

        .h-color-bg-red {
          background-color: #ff0000;
        }

        .h-color-text-peaches-and-cream {
          color: #f8c6b8;
        }

        .h-color-bg-peaches-and-cream {
          background-color: #f8c6b8;
        }
      }
    }
  }
}


// ---------------------------------------------------------------
// Type
// ---------------------------------------------------------------

@include test-module('Type') {
  @include test('Font stack styles mixin') {
    @include assert {
      @include output {
        @include toolkit.font-stack-styles(helvetica);
      }
      @include expect {
        font-family: "Helvetica Neue", arial, sans-serif;
        font-weight: normal;
        font-style: normal;
      }
    }
  }

  @include test('Output helper classes') {
    @include assert {
      @include output {
        @include toolkit.output-type-helpers;
      }
      @include expect {
        .h-type-a {
          font-family: "Helvetica Neue", arial, sans-serif;
          font-weight: normal;
          font-style: normal;
          font-size: 1.6rem;
          line-height: 1.55;
        }

        @media (min-width: 768px) {
          .h-type-a {
            font-size: 2.4rem;
          }
        }

        @media (min-width: 1024px) {
          .h-type-a {
            font-size: 3.2rem;
          }
        }

        .h-type-b {
          font-family: "Helvetica Neue", arial, sans-serif;
          font-weight: normal;
          font-style: normal;
          font-size: 1.6rem;
          line-height: 1.55;
          text-transform: uppercase;
          letter-spacing: 0.1em;
        }

        @media (min-width: 768px) {
          .h-type-b {
            font-size: 2.4rem;
          }
        }

        @media (min-width: 1024px) {
          .h-type-b {
            font-size: 3.2rem;
          }
        }

        .h-type-c {
          font-family: "Helvetica Neue", arial, sans-serif;
          font-weight: normal;
          font-style: normal;
          font-size: 16px;
          line-height: 1.55;
        }

        @media (min-width: 768px) {
          .h-type-c {
            font-size: 24px;
            line-height: 1.7;
          }
        }

        @media (min-width: 1024px) {
          .h-type-c {
            font-size: 32px;
          }
        }

        .h-type-d {
          font-family: "Helvetica Neue", arial, sans-serif;
          font-weight: normal;
          font-style: normal;
          font-size: 1.6rem;
        }

        .h-type-e {
          font-family: "Helvetica Neue", arial, sans-serif;
          font-weight: normal;
          font-style: normal;
          font-size: 16px;
          line-height: 24px;
          text-transform: uppercase;
        }

        .h-type-e {
          font-size: 16px;
        }

        @media (min-width: 320px) {
          .h-type-e {
            font-size: calc(16px + 8 * (100vw - 320px) / 448);
          }
        }

        @media (min-width: 768px) {
          .h-type-e {
            font-size: calc(24px + 8 * (100vw - 768px) / 256);
          }
        }

        @media (min-width: 1024px) {
          .h-type-e {
            font-size: 32px;
          }
        }

        .h-type-e {
          line-height: 24px;
        }

        @media (min-width: 320px) {
          .h-type-e {
            line-height: calc(24px + 16 * (100vw - 320px) / 704);
          }
        }

        @media (min-width: 1024px) {
          .h-type-e {
            line-height: 40px;
          }
        }

        @media (min-width: 1024px) {
          .h-type-e {
            text-transform: none;
          }
        }
      }
    }
  }

  @include test('Type style mixin') {
    @include assert {
      @include output {
        @include toolkit.type-style(a);
      }
      @include expect {
        font-family: "Helvetica Neue", arial, sans-serif;
        font-weight: normal;
        font-style: normal;
        font-size: 1.6rem;
        line-height: 1.55;

        @media (min-width: 768px) {
          font-size: 2.4rem;
        }

        @media (min-width: 1024px) {
          font-size: 3.2rem;
        }
      }
    }
  }

  @include test('Type style mixin with unit for sizes') {
    @include assert {
      @include output {
        @include toolkit.type-style(c);
      }
      @include expect {
        font-family: "Helvetica Neue", arial, sans-serif;
        font-weight: normal;
        font-style: normal;
        font-size: 16px;
        line-height: 1.55;

        @media (min-width: 768px) {
          font-size: 24px;
          line-height: 1.7;
        }

        @media (min-width: 1024px) {
          font-size: 32px;
        }
      }
    }
  }

  @include test('Type style mixin with fluid size') {
    @include assert {
      @include output {
        @include toolkit.type-style(e);
      }
      @include expect {
        font-family: "Helvetica Neue", arial, sans-serif;
        font-weight: normal;
        font-style: normal;
        font-size: 16px;
        line-height: 24px;
        text-transform: uppercase;

        & {
          font-size: 16px;
        }

        @media (min-width: 320px) {
          font-size: calc(16px + 8 * (100vw - 320px) / 448);
        }

        @media (min-width: 768px) {
          font-size: calc(24px + 8 * (100vw - 768px) / 256);
        }

        @media (min-width: 1024px) {
          font-size: 32px;
        }

        & {
          line-height: 24px;
        }

        @media (min-width: 320px) {
          line-height: calc(24px + 16 * (100vw - 320px) / 704);
        }

        @media (min-width: 1024px) {
          line-height: 40px;
        }

        @media (min-width: 1024px) {
          text-transform: none;
        }
      }
    }
  }

  @include test('Get type style mixin') {
    @include assert {
      @include output {
        @include toolkit.get-type-style(a, medium);
      }
      @include expect {
        font-family: "Helvetica Neue", arial, sans-serif;
        font-weight: normal;
        font-style: normal;
        font-size: 2.4rem;
      }
    }
  }

}

@include test-module('Fluid') {
  @include test('Outputs correctly') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px
        );
      }
      @include expect {
        margin-top: 50px;

        @media (min-width: 768px) {
          margin-top: calc(50px + 50 * (100vw - 768px) / 256);
        }

        @media (min-width: 1024px) {
          margin-top: 100px;
        }
      }
    }
  }

  @include test('Outputs only custom properties') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px,
          $custom-property-name: 'my-custom-property'
        );
      }
      @include expect {
        :root {
          --my-custom-property: 50px;
        }

        @media (min-width: 768px) {
          :root {
            --my-custom-property: calc(50px + 50 * (100vw - 768px) / 256);
          }
        }

        @media (min-width: 1024px) {
          :root {
            --my-custom-property: 100px;
          }
        }
      }
    }
  }

  @include test('With height') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px,
          $size-unit: height,
          $viewport-unit: vh
        );
      }
      @include expect {
       margin-top: 50px;

       @media (min-height: 768px) {
         margin-top: calc(50px + 50 * (100vh - 768px) / 256);
       }

       @media (min-height: 1024px) {
         margin-top: 100px;
       }
      }
    }
  }

  @include test('With map keys for sizes') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          default,
          large,
          50px,
          100px
        );
      }
      @include expect {
       margin-top: 50px;

       @media (min-width: 320px) {
         margin-top: calc(50px + 50 * (100vw - 320px) / 704);
       }

       @media (min-width: 1024px) {
         margin-top: 100px;
       }
      }
    }
  }

  @include test('With multiple properties') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          (margin-top, margin-bottom),
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px
        );
      }
      @include expect {
        margin-top: 50px;

        & {
          margin-bottom: 50px;
        }

        @media (min-width: 768px) {
          margin-top: calc(50px + 50 * (100vw - 768px) / 256);

          & {
            margin-bottom: calc(50px + 50 * (100vw - 768px) / 256);
          }
        }

        @media (min-width: 1024px) {
          margin-top: 100px;

          & {
            margin-bottom: 100px;
          }
        }
      }
    }
  }

  @include test('With negative') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px,
          $negative: true
        );
      }
      @include expect {
       margin-top: -50px;

       @media (min-width: 768px) {
         margin-top: calc(-50px + -50 * (100vw - 768px) / 256);
       }

       @media (min-width: 1024px) {
         margin-top: -100px;
       }
      }
    }
  }

  @include test('With scale value') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px,
          $scale: 2
        );
      }
      @include expect {
       margin-top: 100px;

       @media (min-width: 768px) {
         margin-top: calc(100px + 100 * (100vw - 768px) / 256);
       }

       @media (min-width: 1024px) {
         margin-top: 200px;
       }
      }
    }
  }

  @include test('With positive adjust value') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px,
          $adjust: 15px
        );
      }
      @include expect {
       margin-top: 65px;

       @media (min-width: 768px) {
         margin-top: calc(65px + 50 * (100vw - 768px) / 256);
       }

       @media (min-width: 1024px) {
         margin-top: 115px;
       }
      }
    }
  }

  @include test('With negative adjust value') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px,
          $adjust: -15px
        );
      }
      @include expect {
       margin-top: 35px;

       @media (min-width: 768px) {
         margin-top: calc(35px + 50 * (100vw - 768px) / 256);
       }

       @media (min-width: 1024px) {
         margin-top: 85px;
       }
      }
    }
  }

  @include test('With negative adjust value and negative: true') {
    @include assert {
      @include output {
        @include toolkit.fluid(
          margin-top,
          map.get($breakpoints, medium),
          map.get($breakpoints, large),
          50px,
          100px,
          $negative: true,
          $adjust: -15px
        );
      }
      @include expect {
       margin-top: -65px;

       @media (min-width: 768px) {
         margin-top: calc(-65px + -50 * (100vw - 768px) / 256);
       }

       @media (min-width: 1024px) {
         margin-top: -115px;
       }
      }
    }
  }
}

// ---------------------------------------------------------------
// Size
// ---------------------------------------------------------------

@include test-module('Size') {
  @include test('Get size function') {
    @include assert-equal(
      toolkit.get-size(m, default), 20px
    );
    @include assert-equal(
      toolkit.get-size(m, medium), 40px
    );
    @include assert-equal(
      toolkit.get-size(m, max),80px
    );
  }

  @include test('Size mixin') {
    @include assert {
      @include output {
        @include toolkit.size(m);
      }

      @include expect {
        margin-top: var(--size-m);
      }
    }
  }

  @include test('With only one breakpoint') {
    @include assert {
      @include output {
        @include toolkit.size(xs);
      }

      @include expect {
        margin-top: var(--size-xs);
      }
    }
  }

  @include test('With only one breakpoint and multiple properties') {
    @include assert {
      @include output {
        @include toolkit.size(xs, width height);
      }

      @include expect {
        width: var(--size-xs);
        height: var(--size-xs);
      }
    }
  }

  @include test('With only one breakpoint plus negative, scale, and adjust') {
    @include assert {
      @include output {
        @include toolkit.size(xs, $negative: true, $scale: 2, $adjust: 10px);
      }

      @include expect {
        margin-top: calc((var(--size-xs) * 2 + 10px) * -1);
      }
    }
  }

  @include test('With custom property') {
    @include assert {
      @include output {
        @include toolkit.size(m, padding-top padding-bottom);
      }

      @include expect {
        padding-top: var(--size-m);
        padding-bottom: var(--size-m);
      }
    }
  }

  @include test('With negative') {
    @include assert {
      @include output {
        @include toolkit.size(m, $negative: true);
      }

      @include expect {
        margin-top: calc((var(--size-m) * 1) * -1);
      }
    }
  }

  @include test('With adjust value') {
    @include assert {
      @include output {
        @include toolkit.size(m, $adjust: 15px);
      }

      @include expect {
        margin-top: calc((var(--size-m) * 1 + 15px) * 1);
      }
    }
  }

  @include test('Outputs helper classes') {
    @include assert {
      @include output {
        @include toolkit.output-size-helpers;
      }

      @include expect {
        .h-size-top-margin-xs {
          margin-top: var(--size-xs);
        }

        .h-size-bottom-margin-xs {
          margin-bottom: var(--size-xs);
        }

        .h-size-top-padding-xs {
          padding-top: var(--size-xs);
        }

        .h-size-bottom-padding-xs {
          padding-bottom: var(--size-xs);
        }

        .h-size-top-margin-s {
          margin-top: var(--size-s);
        }

        .h-size-bottom-margin-s {
          margin-bottom: var(--size-s);
        }

        .h-size-top-padding-s {
          padding-top: var(--size-s);
        }

        .h-size-bottom-padding-s {
          padding-bottom: var(--size-s);
        }

        .h-size-top-margin-m {
          margin-top: var(--size-m);
        }

        .h-size-bottom-margin-m {
          margin-bottom: var(--size-m);
        }

        .h-size-top-padding-m {
          padding-top: var(--size-m);
        }

        .h-size-bottom-padding-m {
          padding-bottom: var(--size-m);
        }
      }
    }
  }

  @include test('Outputs custom properties') {
    @include assert {
      @include output {
        @include toolkit.output-size-custom-properties;
      }

      @include expect {
        :root {
          --size-xs: 20px;
        }

        :root {
          --size-s: 10px;
        }

        @media (min-width: 320px) {
          :root {
            --size-s: calc(10px + 20 * (100vw - 320px) / 448);
          }
        }

        @media (min-width: 768px) {
          :root {
            --size-s: calc(30px + 20 * (100vw - 768px) / 672);
          }
        }

        @media (min-width: 1440px) {
          :root {
            --size-s: 50px;
          }
        }

        :root {
          --size-m: 20px;
        }

        @media (min-width: 320px) {
          :root {
            --size-m: calc(20px + 20 * (100vw - 320px) / 448);
          }
        }

        @media (min-width: 768px) {
          :root {
            --size-m: calc(40px + 40 * (100vw - 768px) / 672);
          }
        }

        @media (min-width: 1440px) {
          :root {
            --size-m: 80px;
          }
        }
      }
    }
  }
}